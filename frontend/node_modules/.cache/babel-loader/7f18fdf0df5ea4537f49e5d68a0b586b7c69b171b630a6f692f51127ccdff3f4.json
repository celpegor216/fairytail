{"ast":null,"code":"var _s = $RefreshSig$();\nimport { MapContainer, TileLayer, Marker, ZoomControl, useMap } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport { CustomMarkerIcon } from '@map/CustomMarker';\nimport './Map.scss';\nimport ClickMarker from '@map/ClickMarker';\nimport { useEffect, useState } from 'react';\nimport shuffle from '@images/shuffle.svg';\nimport MoveToBack from '@common/MoveToBack';\nimport { useRecoilState } from 'recoil';\nimport { loadingState } from '@apis/Recoil';\nimport InitMessage from '@/apis/notifications/foregroundMessaging';\nimport { getMessageMap } from '@apis/map';\n\n// function generateRandomFloat(min, max) {\n//   return Math.random() * (max - min) + min;\n// }\n\n// function SetCenter({center}) {\n//   const map = useMap();\n\n//   useEffect(() => {\n//     map.setView(center);\n//   }, [center]);\n\n//   return null;\n// }\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Map() {\n  _s();\n  // recoil\n  const [isLoading, setIsLoading] = useRecoilState(loadingState);\n  setIsLoading(true);\n\n  // // 클릭 시 팝업 표시, 해당 위치 좌표값\n  // const [isClicked, setIsClicked] = useState(false);\n  // const [position, setPosition] = useState({lat: -999, lng: -999});\n\n  // const [center, setCenter] = useState({lat: 0, lng: 0});\n  // const [data, setData] = useState([]);\n\n  // useEffect(() => {\n  //   // 현재 위치 받아오기\n  //   if (navigator.geolocation) {\n  //     navigator.geolocation.getCurrentPosition(async pos => {\n  //       setCenter({\n  //         lat: pos.coords.latitude,\n  //         lng: pos.coords.longitude,\n  //       });\n  //     });\n  //   }\n\n  //   // 서버에서 데이터 받아오기\n  //   for (let i = 0; i < 4; i++) {\n  //     getMessageMap(i)\n  //       .then(res => {\n  //         setData(prev => prev.concat(res.data));\n  //       })\n  //       .catch(err => {\n  //         console.log(err);\n  //       });\n  //   }\n  // }, []);\n\n  // // 받은 데이터 화면에 뿌리기\n  // const Markers = () => {\n  //   const markers = data.map((position, index) => {\n  //     return <Marker key={index} position={position} icon={CustomMarkerIcon} />;\n  //   });\n  //   return markers;\n  // };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n}\n_s(Map, \"MIdPLKierNRVyToSTo4x9TIGU/U=\", false, function () {\n  return [useRecoilState];\n});\n_c = Map;\nexport default Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["MapContainer","TileLayer","Marker","ZoomControl","useMap","CustomMarkerIcon","ClickMarker","useEffect","useState","shuffle","MoveToBack","useRecoilState","loadingState","InitMessage","getMessageMap","Map","isLoading","setIsLoading"],"sources":["C:/Users/Administrator/Desktop/S07P31C209/frontend/src/screens/Map.jsx"],"sourcesContent":["import {\r\n  MapContainer,\r\n  TileLayer,\r\n  Marker,\r\n  ZoomControl,\r\n  useMap,\r\n} from 'react-leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport {CustomMarkerIcon} from '@map/CustomMarker';\r\nimport './Map.scss';\r\nimport ClickMarker from '@map/ClickMarker';\r\nimport {useEffect, useState} from 'react';\r\nimport shuffle from '@images/shuffle.svg';\r\nimport MoveToBack from '@common/MoveToBack';\r\nimport {useRecoilState} from 'recoil';\r\nimport {loadingState} from '@apis/Recoil';\r\nimport InitMessage from '@/apis/notifications/foregroundMessaging';\r\nimport {getMessageMap} from '@apis/map';\r\n\r\n// function generateRandomFloat(min, max) {\r\n//   return Math.random() * (max - min) + min;\r\n// }\r\n\r\n// function SetCenter({center}) {\r\n//   const map = useMap();\r\n\r\n//   useEffect(() => {\r\n//     map.setView(center);\r\n//   }, [center]);\r\n\r\n//   return null;\r\n// }\r\n\r\nfunction Map() {\r\n  // recoil\r\n  const [isLoading, setIsLoading] = useRecoilState(loadingState);\r\n  setIsLoading(true);\r\n\r\n  // // 클릭 시 팝업 표시, 해당 위치 좌표값\r\n  // const [isClicked, setIsClicked] = useState(false);\r\n  // const [position, setPosition] = useState({lat: -999, lng: -999});\r\n\r\n  // const [center, setCenter] = useState({lat: 0, lng: 0});\r\n  // const [data, setData] = useState([]);\r\n\r\n  // useEffect(() => {\r\n  //   // 현재 위치 받아오기\r\n  //   if (navigator.geolocation) {\r\n  //     navigator.geolocation.getCurrentPosition(async pos => {\r\n  //       setCenter({\r\n  //         lat: pos.coords.latitude,\r\n  //         lng: pos.coords.longitude,\r\n  //       });\r\n  //     });\r\n  //   }\r\n\r\n  //   // 서버에서 데이터 받아오기\r\n  //   for (let i = 0; i < 4; i++) {\r\n  //     getMessageMap(i)\r\n  //       .then(res => {\r\n  //         setData(prev => prev.concat(res.data));\r\n  //       })\r\n  //       .catch(err => {\r\n  //         console.log(err);\r\n  //       });\r\n  //   }\r\n  // }, []);\r\n\r\n  // // 받은 데이터 화면에 뿌리기\r\n  // const Markers = () => {\r\n  //   const markers = data.map((position, index) => {\r\n  //     return <Marker key={index} position={position} icon={CustomMarkerIcon} />;\r\n  //   });\r\n  //   return markers;\r\n  // };\r\n\r\n  return (\r\n    <>\r\n      {/* <InitMessage />\r\n      <div className=\"screen\">\r\n        <MoveToBack path=\"/main\" color=\"black\" />\r\n        <div\r\n          className=\"map-random\"\r\n          onClick={() => {\r\n            setPosition({\r\n              lat: generateRandomFloat(-90, 90),\r\n              lng: generateRandomFloat(-180, 180),\r\n            });\r\n            setIsClicked(true);\r\n          }}>\r\n          <img src={shuffle} alt=\"랜덤 위치 선정 버튼\" />\r\n        </div>\r\n\r\n        <MapContainer\r\n          zoomControl={false}\r\n          maxBounds={[\r\n            [-90, -180],\r\n            [90, 180],\r\n          ]}\r\n          minZoom={2}\r\n          style={{width: '100%', height: '100%'}}\r\n          center={center}\r\n          zoom={14}\r\n          scrollWheelZoom={true}>\r\n          <TileLayer\r\n            attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          />\r\n          {data ? Markers() : null}\r\n          <ClickMarker\r\n            isClicked={isClicked}\r\n            setIsClicked={setIsClicked}\r\n            position={position}\r\n            setPosition={setPosition}\r\n          />\r\n          <ZoomControl position=\"bottomright\" />\r\n          <SetCenter center={center} />\r\n        </MapContainer>\r\n      </div> */}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Map;\r\n"],"mappings":";AAAA,SACEA,YAAY,EACZC,SAAS,EACTC,MAAM,EACNC,WAAW,EACXC,MAAM,QACD,eAAe;AACtB,OAAO,0BAA0B;AACjC,SAAQC,gBAAgB,QAAO,mBAAmB;AAClD,OAAO,YAAY;AACnB,OAAOC,WAAW,MAAM,kBAAkB;AAC1C,SAAQC,SAAS,EAAEC,QAAQ,QAAO,OAAO;AACzC,OAAOC,OAAO,MAAM,qBAAqB;AACzC,OAAOC,UAAU,MAAM,oBAAoB;AAC3C,SAAQC,cAAc,QAAO,QAAQ;AACrC,SAAQC,YAAY,QAAO,cAAc;AACzC,OAAOC,WAAW,MAAM,0CAA0C;AAClE,SAAQC,aAAa,QAAO,WAAW;;AAEvC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AAAA;AAAA;AAEA,SAASC,GAAG,GAAG;EAAA;EACb;EACA,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGN,cAAc,CAACC,YAAY,CAAC;EAC9DK,YAAY,CAAC,IAAI,CAAC;;EAElB;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,oBACE,qCA0CG;AAEP;AAAC,GAxFQF,GAAG;EAAA,QAEwBJ,cAAc;AAAA;AAAA,KAFzCI,GAAG;AA0FZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}