{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\S07P31C209\\\\frontend\\\\src\\\\screens\\\\Map.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { MapContainer, TileLayer, Marker, ZoomControl, useMap } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport { CustomMarkerIcon } from '@map/CustomMarker';\nimport './Map.scss';\nimport ClickMarker from '@map/ClickMarker';\nimport { useEffect, useState } from 'react';\nimport shuffle from '@images/shuffle.svg';\nimport MoveToBack from '@common/MoveToBack';\nimport { useRecoilState } from 'recoil';\nimport { loadingState } from '@apis/Recoil';\nimport InitMessage from '@/apis/notifications/foregroundMessaging';\nimport { getMessageMap } from '@apis/map';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction generateRandomFloat(min, max) {\n  return Math.random() * (max - min) + min;\n}\nfunction SetCenter(_ref) {\n  _s();\n  let {\n    center\n  } = _ref;\n  const map = useMap();\n  useEffect(() => {\n    map.setView(center);\n  }, [center]);\n  return null;\n}\n_s(SetCenter, \"IoceErwr5KVGS9kN4RQ1bOkYMAg=\", false, function () {\n  return [useMap];\n});\n_c = SetCenter;\nfunction Map() {\n  _s2();\n  // recoil\n  const [isLoading, setIsLoading] = useRecoilState(loadingState);\n  setIsLoading(true);\n\n  // 클릭 시 팝업 표시, 해당 위치 좌표값\n  const [isClicked, setIsClicked] = useState(false);\n  const [position, setPosition] = useState({\n    lat: -999,\n    lng: -999\n  });\n  const [center, setCenter] = useState({\n    lat: 0,\n    lng: 0\n  });\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    // 현재 위치 받아오기\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(async pos => {\n        setCenter({\n          lat: pos.coords.latitude,\n          lng: pos.coords.longitude\n        });\n      });\n    }\n\n    // 서버에서 데이터 받아오기\n    for (let i = 0; i < 4; i++) {\n      getMessageMap(i).then(res => {\n        setData(prev => prev.concat(res.data));\n      }).catch(err => {\n        console.log(err);\n      });\n    }\n  }, []);\n\n  // 받은 데이터 화면에 뿌리기\n  const Markers = () => {\n    const markers = data.map((position, index) => {\n      return /*#__PURE__*/_jsxDEV(Marker, {\n        position: position,\n        icon: CustomMarkerIcon\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 14\n      }, this);\n    });\n    return markers;\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n}\n_s2(Map, \"glF88/FukbahGtyShl2uTR7AL5Y=\", false, function () {\n  return [useRecoilState];\n});\n_c2 = Map;\nexport default Map;\nvar _c, _c2;\n$RefreshReg$(_c, \"SetCenter\");\n$RefreshReg$(_c2, \"Map\");","map":{"version":3,"names":["MapContainer","TileLayer","Marker","ZoomControl","useMap","CustomMarkerIcon","ClickMarker","useEffect","useState","shuffle","MoveToBack","useRecoilState","loadingState","InitMessage","getMessageMap","generateRandomFloat","min","max","Math","random","SetCenter","center","map","setView","Map","isLoading","setIsLoading","isClicked","setIsClicked","position","setPosition","lat","lng","setCenter","data","setData","navigator","geolocation","getCurrentPosition","pos","coords","latitude","longitude","i","then","res","prev","concat","catch","err","console","log","Markers","markers","index"],"sources":["C:/Users/Administrator/Desktop/S07P31C209/frontend/src/screens/Map.jsx"],"sourcesContent":["import {\r\n  MapContainer,\r\n  TileLayer,\r\n  Marker,\r\n  ZoomControl,\r\n  useMap,\r\n} from 'react-leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport {CustomMarkerIcon} from '@map/CustomMarker';\r\nimport './Map.scss';\r\nimport ClickMarker from '@map/ClickMarker';\r\nimport {useEffect, useState} from 'react';\r\nimport shuffle from '@images/shuffle.svg';\r\nimport MoveToBack from '@common/MoveToBack';\r\nimport {useRecoilState} from 'recoil';\r\nimport {loadingState} from '@apis/Recoil';\r\nimport InitMessage from '@/apis/notifications/foregroundMessaging';\r\nimport {getMessageMap} from '@apis/map';\r\n\r\nfunction generateRandomFloat(min, max) {\r\n  return Math.random() * (max - min) + min;\r\n}\r\n\r\nfunction SetCenter({center}) {\r\n  const map = useMap();\r\n\r\n  useEffect(() => {\r\n    map.setView(center);\r\n  }, [center]);\r\n\r\n  return null;\r\n}\r\n\r\nfunction Map() {\r\n  // recoil\r\n  const [isLoading, setIsLoading] = useRecoilState(loadingState);\r\n  setIsLoading(true);\r\n\r\n  // 클릭 시 팝업 표시, 해당 위치 좌표값\r\n  const [isClicked, setIsClicked] = useState(false);\r\n  const [position, setPosition] = useState({lat: -999, lng: -999});\r\n\r\n  const [center, setCenter] = useState({lat: 0, lng: 0});\r\n  const [data, setData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // 현재 위치 받아오기\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(async pos => {\r\n        setCenter({\r\n          lat: pos.coords.latitude,\r\n          lng: pos.coords.longitude,\r\n        });\r\n      });\r\n    }\r\n\r\n    // 서버에서 데이터 받아오기\r\n    for (let i = 0; i < 4; i++) {\r\n      getMessageMap(i)\r\n        .then(res => {\r\n          setData(prev => prev.concat(res.data));\r\n        })\r\n        .catch(err => {\r\n          console.log(err);\r\n        });\r\n    }\r\n  }, []);\r\n\r\n  // 받은 데이터 화면에 뿌리기\r\n  const Markers = () => {\r\n    const markers = data.map((position, index) => {\r\n      return <Marker key={index} position={position} icon={CustomMarkerIcon} />;\r\n    });\r\n    return markers;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* <InitMessage />\r\n      <div className=\"screen\">\r\n        <MoveToBack path=\"/main\" color=\"black\" />\r\n        <div\r\n          className=\"map-random\"\r\n          onClick={() => {\r\n            setPosition({\r\n              lat: generateRandomFloat(-90, 90),\r\n              lng: generateRandomFloat(-180, 180),\r\n            });\r\n            setIsClicked(true);\r\n          }}>\r\n          <img src={shuffle} alt=\"랜덤 위치 선정 버튼\" />\r\n        </div>\r\n\r\n        <MapContainer\r\n          zoomControl={false}\r\n          maxBounds={[\r\n            [-90, -180],\r\n            [90, 180],\r\n          ]}\r\n          minZoom={2}\r\n          style={{width: '100%', height: '100%'}}\r\n          center={center}\r\n          zoom={14}\r\n          scrollWheelZoom={true}>\r\n          <TileLayer\r\n            attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          />\r\n          {data ? Markers() : null}\r\n          <ClickMarker\r\n            isClicked={isClicked}\r\n            setIsClicked={setIsClicked}\r\n            position={position}\r\n            setPosition={setPosition}\r\n          />\r\n          <ZoomControl position=\"bottomright\" />\r\n          <SetCenter center={center} />\r\n        </MapContainer>\r\n      </div> */}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Map;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}