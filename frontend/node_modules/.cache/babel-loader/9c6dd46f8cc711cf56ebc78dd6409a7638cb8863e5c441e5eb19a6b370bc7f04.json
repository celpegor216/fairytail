{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\S07P31C209\\\\frontend\\\\src\\\\screens\\\\Map.jsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n// import {\n//   MapContainer,\n//   TileLayer,\n//   Marker,\n//   ZoomControl,\n//   useMap,\n// } from 'react-leaflet';\n// import 'leaflet/dist/leaflet.css';\n// import {CustomMarkerIcon} from '@map/CustomMarker';\n// import './Map.scss';\n// import ClickMarker from '@map/ClickMarker';\n// import {useEffect, useState} from 'react';\n// import shuffle from '@images/shuffle.svg';\n// import MoveToBack from '@common/MoveToBack';\n// import {useRecoilState} from 'recoil';\n// import {loadingState} from '@apis/Recoil';\n// import InitMessage from '@/apis/notifications/foregroundMessaging';\n// import {getMessageMap} from '@apis/map';\n\n// function generateRandomFloat(min, max) {\n//   return Math.random() * (max - min) + min;\n// }\n\n// function SetCenter({center}) {\n//   const map = useMap();\n\n//   useEffect(() => {\n//     map.setView(center);\n//   }, [center]);\n\n//   return null;\n// }\n\nfunction Map() {\n  console.log('왜 두 번????');\n  // // recoil\n  // const [isLoading, setIsLoading] = useRecoilState(loadingState);\n  // setIsLoading(true);\n\n  // // 클릭 시 팝업 표시, 해당 위치 좌표값\n  // const [isClicked, setIsClicked] = useState(false);\n  // const [position, setPosition] = useState({lat: -999, lng: -999});\n\n  // const [center, setCenter] = useState({lat: 0, lng: 0});\n  // const [data, setData] = useState([]);\n\n  // useEffect(() => {\n  //   // 현재 위치 받아오기\n  //   if (navigator.geolocation) {\n  //     navigator.geolocation.getCurrentPosition(async pos => {\n  //       setCenter({\n  //         lat: pos.coords.latitude,\n  //         lng: pos.coords.longitude,\n  //       });\n  //     });\n  //   }\n\n  //   // 서버에서 데이터 받아오기\n  //   for (let i = 0; i < 4; i++) {\n  //     getMessageMap(i)\n  //       .then(res => {\n  //         setData(prev => prev.concat(res.data));\n  //       })\n  //       .catch(err => {\n  //         console.log(err);\n  //       });\n  //   }\n  // }, []);\n\n  // // 받은 데이터 화면에 뿌리기\n  // const Markers = () => {\n  //   const markers = data.map((position, index) => {\n  //     return <Marker key={index} position={position} icon={CustomMarkerIcon} />;\n  //   });\n  //   return markers;\n  // };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\uC65C \\uB450 \\uBC88 \\uC529 \\uB4E4\\uC5B4\\uAC00\\uC9C0\\uB0D0\\uACE0\\uC624\\uC624\\uC624\\uC624\\uC628\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_c = Map;\nexport default Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["Map","console","log"],"sources":["C:/Users/Administrator/Desktop/S07P31C209/frontend/src/screens/Map.jsx"],"sourcesContent":["// import {\r\n//   MapContainer,\r\n//   TileLayer,\r\n//   Marker,\r\n//   ZoomControl,\r\n//   useMap,\r\n// } from 'react-leaflet';\r\n// import 'leaflet/dist/leaflet.css';\r\n// import {CustomMarkerIcon} from '@map/CustomMarker';\r\n// import './Map.scss';\r\n// import ClickMarker from '@map/ClickMarker';\r\n// import {useEffect, useState} from 'react';\r\n// import shuffle from '@images/shuffle.svg';\r\n// import MoveToBack from '@common/MoveToBack';\r\n// import {useRecoilState} from 'recoil';\r\n// import {loadingState} from '@apis/Recoil';\r\n// import InitMessage from '@/apis/notifications/foregroundMessaging';\r\n// import {getMessageMap} from '@apis/map';\r\n\r\n// function generateRandomFloat(min, max) {\r\n//   return Math.random() * (max - min) + min;\r\n// }\r\n\r\n// function SetCenter({center}) {\r\n//   const map = useMap();\r\n\r\n//   useEffect(() => {\r\n//     map.setView(center);\r\n//   }, [center]);\r\n\r\n//   return null;\r\n// }\r\n\r\nfunction Map() {\r\n  console.log('왜 두 번????');\r\n  // // recoil\r\n  // const [isLoading, setIsLoading] = useRecoilState(loadingState);\r\n  // setIsLoading(true);\r\n\r\n  // // 클릭 시 팝업 표시, 해당 위치 좌표값\r\n  // const [isClicked, setIsClicked] = useState(false);\r\n  // const [position, setPosition] = useState({lat: -999, lng: -999});\r\n\r\n  // const [center, setCenter] = useState({lat: 0, lng: 0});\r\n  // const [data, setData] = useState([]);\r\n\r\n  // useEffect(() => {\r\n  //   // 현재 위치 받아오기\r\n  //   if (navigator.geolocation) {\r\n  //     navigator.geolocation.getCurrentPosition(async pos => {\r\n  //       setCenter({\r\n  //         lat: pos.coords.latitude,\r\n  //         lng: pos.coords.longitude,\r\n  //       });\r\n  //     });\r\n  //   }\r\n\r\n  //   // 서버에서 데이터 받아오기\r\n  //   for (let i = 0; i < 4; i++) {\r\n  //     getMessageMap(i)\r\n  //       .then(res => {\r\n  //         setData(prev => prev.concat(res.data));\r\n  //       })\r\n  //       .catch(err => {\r\n  //         console.log(err);\r\n  //       });\r\n  //   }\r\n  // }, []);\r\n\r\n  // // 받은 데이터 화면에 뿌리기\r\n  // const Markers = () => {\r\n  //   const markers = data.map((position, index) => {\r\n  //     return <Marker key={index} position={position} icon={CustomMarkerIcon} />;\r\n  //   });\r\n  //   return markers;\r\n  // };\r\n\r\n  return (\r\n    <>\r\n      <div>왜 두 번 씩 들어가지냐고오오오오온</div>\r\n      {/* <InitMessage />\r\n      <div className=\"screen\">\r\n        <MoveToBack path=\"/main\" color=\"black\" />\r\n        <div\r\n          className=\"map-random\"\r\n          onClick={() => {\r\n            setPosition({\r\n              lat: generateRandomFloat(-90, 90),\r\n              lng: generateRandomFloat(-180, 180),\r\n            });\r\n            setIsClicked(true);\r\n          }}>\r\n          <img src={shuffle} alt=\"랜덤 위치 선정 버튼\" />\r\n        </div>\r\n\r\n        <MapContainer\r\n          zoomControl={false}\r\n          maxBounds={[\r\n            [-90, -180],\r\n            [90, 180],\r\n          ]}\r\n          minZoom={2}\r\n          style={{width: '100%', height: '100%'}}\r\n          center={center}\r\n          zoom={14}\r\n          scrollWheelZoom={true}>\r\n          <TileLayer\r\n            attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          />\r\n          {data ? Markers() : null}\r\n          <ClickMarker\r\n            isClicked={isClicked}\r\n            setIsClicked={setIsClicked}\r\n            position={position}\r\n            setPosition={setPosition}\r\n          />\r\n          <ZoomControl position=\"bottomright\" />\r\n          <SetCenter center={center} />\r\n        </MapContainer>\r\n      </div> */}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Map;\r\n"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,SAASA,GAAG,GAAG;EACbC,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;EACxB;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,oBACE;IAAA,uBACE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAA8B,iBA0C7B;AAEP;AAAC,KA1FQF,GAAG;AA4FZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}