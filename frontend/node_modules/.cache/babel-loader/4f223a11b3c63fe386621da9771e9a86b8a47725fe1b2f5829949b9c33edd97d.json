{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\S07P31C209\\\\frontend\\\\src\\\\screens\\\\VR.tsx\",\n  _s = $RefreshSig$();\nimport './VR.scss';\nimport Iframe from 'react-iframe';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport Loading from '@/components/loading/Loading';\nimport MoveToBack from '@/components/common/MoveToBack';\nimport { useRecoilState } from 'recoil';\nimport { getMessageVR } from '@/apis/vr';\nimport OptionBtn from '@/components/vr/OptionBtn';\nimport { loadingState } from '@apis/Recoil';\nimport InitMessage from '@/apis/notifications/foregroundMessaging';\nimport OpenHelp from '@common/OpenHelp';\nimport { toMessageDetail } from '@/apis/router';\n// import {vrResponse} from '@/apis/messageCreate';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction VR() {\n  _s();\n  // recoil\n  const [isLoading, setIsLoading] = useRecoilState(loadingState);\n  const navigate = useNavigate();\n\n  // 정렬 옵션: false-최신순, true-좋아요순\n  const [option, setOption] = useState(false);\n  const [data, setData] = useState([]);\n  const [isFinished, setIsFinished] = useState(-1);\n\n  // 이전 페이지에서 받은 위치 정보를 location에 저장\n  const state = useLocation().state;\n  const position = state ? state.position : null;\n  const [location, setLocation] = useState(position);\n\n  // iframe 준비 확인\n  const [isLoaded, setIsLoaded] = useState(false);\n  useEffect(() => {\n    // 받은 위치 정보가 없을 경우, 현재 위치 받아오기\n    if (location === null) {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(async pos => {\n          setLocation({\n            lat: pos.coords.latitude,\n            lng: pos.coords.longitude\n          });\n        });\n      } else {\n        alert('브라우저에서 위치 정보를 얻을 수 없습니다.');\n        navigate(-1);\n      }\n    } else {\n      // 서버에서 데이터 받아오기\n      const optionString = option ? 'like' : 'latest';\n      for (let i = 0; i < 4; i++) {\n        getMessageVR(i, optionString, location).then(res => {\n          setData(prev => prev.concat(res.data));\n          setIsFinished(prev => prev + 1);\n        }).catch(err => {\n          console.log(err);\n        });\n      }\n    }\n  }, [isLoaded, option]);\n\n  // 자식에 데이터 전달\n  useEffect(() => {\n    if (isFinished === 3 && data.length > 0) {\n      var _child$0$contentWindo;\n      console.log(data);\n      const child = document.getElementsByTagName('iframe');\n      (_child$0$contentWindo = child[0].contentWindow) === null || _child$0$contentWindo === void 0 ? void 0 : _child$0$contentWindo.postMessage(data, '*');\n      setIsFinished(-1);\n    }\n  }, [isFinished, data]);\n\n  // 자식에게서 메세지 받을 경우 페이지 이동\n  const [postId, setPostId] = useState(0);\n  const receiveMsgFromChild = ev => {\n    if (ev.data === 'denied') {\n      navigate(-1);\n    } else if (ev.data === 'create') {\n      navigate('/message/create');\n    } else if (ev.data.postId !== undefined && ev.data.postId !== null) {\n      setPostId(ev.data.postId);\n      navigate(toMessageDetail(ev.data.postId, ev.data.type));\n    }\n  };\n  useEffect(() => {\n    window.addEventListener('message', receiveMsgFromChild);\n    return () => window.removeEventListener('message', receiveMsgFromChild);\n  }, [postId]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(InitMessage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"vr\",\n      children: [isLoaded ? null : /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 28\n      }, this), /*#__PURE__*/_jsxDEV(MoveToBack, {\n        path: \"-1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), data.length > 0 ? /*#__PURE__*/_jsxDEV(OptionBtn, {\n        option: option,\n        setOption: setOption,\n        setData: setData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this) : null, /*#__PURE__*/_jsxDEV(OpenHelp, {\n        imagesIndex: 2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Iframe, {\n        className: \"vr-frame\",\n        url: \"../iframeVR/IframeVR.html\",\n        frameBorder: 0,\n        onLoad: () => setTimeout(() => {\n          setIsLoaded(true);\n          setIsLoading(true);\n        }, 1000)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(VR, \"usgGfb9+hwp7XZrG7GNCHFtmi6o=\", false, function () {\n  return [useRecoilState, useNavigate, useLocation];\n});\n_c = VR;\nexport default VR;\nvar _c;\n$RefreshReg$(_c, \"VR\");","map":{"version":3,"names":["Iframe","useNavigate","useLocation","useEffect","useState","Loading","MoveToBack","useRecoilState","getMessageVR","OptionBtn","loadingState","InitMessage","OpenHelp","toMessageDetail","VR","isLoading","setIsLoading","navigate","option","setOption","data","setData","isFinished","setIsFinished","state","position","location","setLocation","isLoaded","setIsLoaded","navigator","geolocation","getCurrentPosition","pos","lat","coords","latitude","lng","longitude","alert","optionString","i","then","res","prev","concat","catch","err","console","log","length","child","document","getElementsByTagName","contentWindow","postMessage","postId","setPostId","receiveMsgFromChild","ev","undefined","type","window","addEventListener","removeEventListener","setTimeout"],"sources":["C:/Users/Administrator/Desktop/S07P31C209/frontend/src/screens/VR.tsx"],"sourcesContent":["import './VR.scss';\r\nimport Iframe from 'react-iframe';\r\nimport {useNavigate, useLocation} from 'react-router-dom';\r\nimport {useEffect, useState} from 'react';\r\nimport Loading from '@/components/loading/Loading';\r\nimport MoveToBack from '@/components/common/MoveToBack';\r\nimport {useRecoilState} from 'recoil';\r\n\r\nimport {getMessageVR} from '@/apis/vr';\r\nimport {LocationParams} from '@/apis';\r\nimport OptionBtn from '@/components/vr/OptionBtn';\r\nimport {loadingState} from '@apis/Recoil';\r\nimport InitMessage from '@/apis/notifications/foregroundMessaging';\r\n\r\nimport OpenHelp from '@common/OpenHelp';\r\nimport {toMessageDetail} from '@/apis/router';\r\n// import {vrResponse} from '@/apis/messageCreate';\r\n\r\nfunction VR() {\r\n  // recoil\r\n  const [isLoading, setIsLoading] = useRecoilState(loadingState);\r\n\r\n  const navigate = useNavigate();\r\n\r\n  // 정렬 옵션: false-최신순, true-좋아요순\r\n  const [option, setOption] = useState(false);\r\n\r\n  const [data, setData] = useState([]);\r\n  const [isFinished, setIsFinished] = useState(-1);\r\n\r\n  // 이전 페이지에서 받은 위치 정보를 location에 저장\r\n  const state = useLocation().state;\r\n  const position = state ? (state.position as LocationParams) : null;\r\n  const [location, setLocation] = useState(position);\r\n\r\n  // iframe 준비 확인\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // 받은 위치 정보가 없을 경우, 현재 위치 받아오기\r\n    if (location === null) {\r\n      if (navigator.geolocation) {\r\n        navigator.geolocation.getCurrentPosition(async pos => {\r\n          setLocation({\r\n            lat: pos.coords.latitude,\r\n            lng: pos.coords.longitude,\r\n          });\r\n        });\r\n      } else {\r\n        alert('브라우저에서 위치 정보를 얻을 수 없습니다.');\r\n        navigate(-1);\r\n      }\r\n    } else {\r\n      // 서버에서 데이터 받아오기\r\n      const optionString = option ? 'like' : 'latest';\r\n\r\n      for (let i = 0; i < 4; i++) {\r\n        getMessageVR(i, optionString, location)\r\n          .then(res => {\r\n            setData(prev => prev.concat(res.data));\r\n            setIsFinished(prev => prev + 1);\r\n          })\r\n          .catch(err => {\r\n            console.log(err);\r\n          });\r\n      }\r\n    }\r\n  }, [isLoaded, option]);\r\n\r\n  // 자식에 데이터 전달\r\n  useEffect(() => {\r\n    if (isFinished === 3 && data.length > 0) {\r\n      console.log(data);\r\n\r\n      const child = document.getElementsByTagName('iframe');\r\n      child[0].contentWindow?.postMessage(data, '*');\r\n      setIsFinished(-1);\r\n    }\r\n  }, [isFinished, data]);\r\n\r\n  // 자식에게서 메세지 받을 경우 페이지 이동\r\n  const [postId, setPostId] = useState(0);\r\n\r\n  const receiveMsgFromChild = (ev: MessageEvent<any>) => {\r\n    if (ev.data === 'denied') {\r\n      navigate(-1);\r\n    } else if (ev.data === 'create') {\r\n      navigate('/message/create');\r\n    } else if (ev.data.postId !== undefined && ev.data.postId !== null) {\r\n      setPostId(ev.data.postId);\r\n      navigate(toMessageDetail(ev.data.postId, ev.data.type));\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('message', receiveMsgFromChild);\r\n    return () => window.removeEventListener('message', receiveMsgFromChild);\r\n  }, [postId]);\r\n\r\n  return (\r\n    <>\r\n      <InitMessage />\r\n      <div className=\"vr\">\r\n        {isLoaded ? null : <Loading />}\r\n\r\n        <MoveToBack path=\"-1\" />\r\n        {data.length > 0 ? (\r\n          <OptionBtn option={option} setOption={setOption} setData={setData} />\r\n        ) : null}\r\n        <OpenHelp imagesIndex={2} />\r\n\r\n        <Iframe\r\n          className=\"vr-frame\"\r\n          url=\"../iframeVR/IframeVR.html\"\r\n          frameBorder={0}\r\n          onLoad={() =>\r\n            setTimeout(() => {\r\n              setIsLoaded(true);\r\n              setIsLoading(true);\r\n            }, 1000)\r\n          }\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default VR;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}