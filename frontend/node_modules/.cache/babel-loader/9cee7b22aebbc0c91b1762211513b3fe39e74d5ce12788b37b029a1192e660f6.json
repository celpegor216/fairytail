{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\S07P31C209\\\\frontend\\\\src\\\\screens\\\\Map.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { MapContainer, TileLayer, Marker, ZoomControl, useMap } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport { useEffect, useState } from 'react';\nimport '@screens/Map.scss';\nimport { CustomMarkerIcon } from '@map/CustomMarker';\nimport ClickMarker from '@map/ClickMarker';\nimport MoveToBack from '@common/MoveToBack';\nimport OpenHelp from '@common/OpenHelp';\nimport Airplane from '@images/airplane.webp';\nimport { getMessageMap } from '@apis/map';\n\n// 최소, 최대 범위 이내 랜덤 실수 생성\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction generateRandomFloat(min, max) {\n  return Math.random() * (max - min) + min;\n}\n\n// 지도 중심 지정\nfunction SetCenter(_ref) {\n  _s();\n  let {\n    center\n  } = _ref;\n  const map = useMap();\n  useEffect(() => {\n    map.setView(center);\n  }, []);\n  return null;\n}\n_s(SetCenter, \"IoceErwr5KVGS9kN4RQ1bOkYMAg=\", false, function () {\n  return [useMap];\n});\n_c = SetCenter;\nfunction Map() {\n  _s2();\n  // 지도 클릭 시 팝업 표시, 해당 위치 좌표값\n  const [isClicked, setIsClicked] = useState(false);\n  const [position, setPosition] = useState({\n    lat: -999,\n    lng: -999\n  });\n\n  // 지도 중심\n  const [center, setCenter] = useState({\n    lat: 0,\n    lng: 0\n  });\n  const [isReady, setIsReady] = useState(false);\n\n  // 데이터 및 데이터 받아오기가 끝났는지 확인하기 위한 state\n  const [isFinished, setIsFinished] = useState(-1);\n  const [data, setData] = useState([]);\n\n  // 현재 위치 받아와서 지도 중심 설정\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(async pos => {\n        setCenter({\n          lat: pos.coords.latitude,\n          lng: pos.coords.longitude\n        });\n        setIsReady(true);\n      });\n    }\n  }, []);\n\n  // 서버에서 데이터 받아오기\n  useEffect(() => {\n    if (isReady) {\n      for (let i = 0; i < 4; i++) {\n        getMessageMap(i).then(res => {\n          setData(prev => prev.concat(res.data));\n          setIsFinished(prev => prev + 1);\n        }).catch(err => {\n          console.log(err);\n        });\n      }\n    }\n  }, [isReady]);\n\n  // 받은 데이터 화면에 마커로 표시하기\n  const Markers = () => {\n    const markers = data.map((position, index) => {\n      return /*#__PURE__*/_jsxDEV(Marker, {\n        position: position,\n        icon: CustomMarkerIcon\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 14\n      }, this);\n    });\n    return markers;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"screen\",\n    children: [/*#__PURE__*/_jsxDEV(MoveToBack, {\n      path: \"/main\",\n      color: \"#779BFF\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(OpenHelp, {\n      imagesIndex: 1,\n      color: \"#779BFF\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-random\",\n      onClick: () => {\n        setPosition({\n          lat: generateRandomFloat(-90, 90),\n          lng: generateRandomFloat(-180, 180)\n        });\n        setIsClicked(true);\n      },\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: Airplane,\n        alt: \"\\uB79C\\uB364 \\uC704\\uCE58 \\uC774\\uB3D9 \\uBC84\\uD2BC\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MapContainer, {\n      attributionControl: false,\n      zoomControl: false,\n      maxBounds: [[-90, -180], [90, 180]],\n      minZoom: 2,\n      maxZoom: 18,\n      style: {\n        width: '100%',\n        height: '100%'\n      },\n      center: center,\n      zoom: 14,\n      scrollWheelZoom: true,\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        noWrap: true,\n        url: \"https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), isFinished === 3 ? Markers() : null, /*#__PURE__*/_jsxDEV(ClickMarker, {\n        isClicked: isClicked,\n        setIsClicked: setIsClicked,\n        position: position,\n        setPosition: setPosition\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ZoomControl, {\n        position: \"bottomright\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), isReady ? /*#__PURE__*/_jsxDEV(SetCenter, {\n        center: center\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 20\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n}\n_s2(Map, \"aQyEFYmsZp/fvzoGFnKKSnro2so=\");\n_c2 = Map;\nexport default Map;\nvar _c, _c2;\n$RefreshReg$(_c, \"SetCenter\");\n$RefreshReg$(_c2, \"Map\");","map":{"version":3,"names":["MapContainer","TileLayer","Marker","ZoomControl","useMap","useEffect","useState","CustomMarkerIcon","ClickMarker","MoveToBack","OpenHelp","Airplane","getMessageMap","generateRandomFloat","min","max","Math","random","SetCenter","center","map","setView","Map","isClicked","setIsClicked","position","setPosition","lat","lng","setCenter","isReady","setIsReady","isFinished","setIsFinished","data","setData","navigator","geolocation","getCurrentPosition","pos","coords","latitude","longitude","i","then","res","prev","concat","catch","err","console","log","Markers","markers","index","width","height"],"sources":["C:/Users/Administrator/Desktop/S07P31C209/frontend/src/screens/Map.jsx"],"sourcesContent":["import {\r\n  MapContainer,\r\n  TileLayer,\r\n  Marker,\r\n  ZoomControl,\r\n  useMap,\r\n} from 'react-leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport {useEffect, useState} from 'react';\r\n\r\nimport '@screens/Map.scss';\r\nimport {CustomMarkerIcon} from '@map/CustomMarker';\r\nimport ClickMarker from '@map/ClickMarker';\r\nimport MoveToBack from '@common/MoveToBack';\r\nimport OpenHelp from '@common/OpenHelp';\r\nimport Airplane from '@images/airplane.webp';\r\n\r\nimport {getMessageMap} from '@apis/map';\r\n\r\n// 최소, 최대 범위 이내 랜덤 실수 생성\r\nfunction generateRandomFloat(min, max) {\r\n  return Math.random() * (max - min) + min;\r\n}\r\n\r\n// 지도 중심 지정\r\nfunction SetCenter({center}) {\r\n  const map = useMap();\r\n\r\n  useEffect(() => {\r\n    map.setView(center);\r\n  }, []);\r\n\r\n  return null;\r\n}\r\n\r\nfunction Map() {\r\n  // 지도 클릭 시 팝업 표시, 해당 위치 좌표값\r\n  const [isClicked, setIsClicked] = useState(false);\r\n  const [position, setPosition] = useState({lat: -999, lng: -999});\r\n\r\n  // 지도 중심\r\n  const [center, setCenter] = useState({lat: 0, lng: 0});\r\n  const [isReady, setIsReady] = useState(false);\r\n\r\n  // 데이터 및 데이터 받아오기가 끝났는지 확인하기 위한 state\r\n  const [isFinished, setIsFinished] = useState(-1);\r\n  const [data, setData] = useState([]);\r\n\r\n  // 현재 위치 받아와서 지도 중심 설정\r\n  useEffect(() => {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(async pos => {\r\n        setCenter({\r\n          lat: pos.coords.latitude,\r\n          lng: pos.coords.longitude,\r\n        });\r\n        setIsReady(true);\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  // 서버에서 데이터 받아오기\r\n  useEffect(() => {\r\n    if (isReady) {\r\n      for (let i = 0; i < 4; i++) {\r\n        getMessageMap(i)\r\n          .then(res => {\r\n            setData(prev => prev.concat(res.data));\r\n            setIsFinished(prev => prev + 1);\r\n          })\r\n          .catch(err => {\r\n            console.log(err);\r\n          });\r\n      }\r\n    }\r\n  }, [isReady]);\r\n\r\n  // 받은 데이터 화면에 마커로 표시하기\r\n  const Markers = () => {\r\n    const markers = data.map((position, index) => {\r\n      return <Marker key={index} position={position} icon={CustomMarkerIcon} />;\r\n    });\r\n    return markers;\r\n  };\r\n\r\n  return (\r\n    <div className=\"screen\">\r\n      <MoveToBack path=\"/main\" color=\"#779BFF\" />\r\n      <OpenHelp imagesIndex={1} color=\"#779BFF\" />\r\n      <div\r\n        className=\"map-random\"\r\n        onClick={() => {\r\n          setPosition({\r\n            lat: generateRandomFloat(-90, 90),\r\n            lng: generateRandomFloat(-180, 180),\r\n          });\r\n          setIsClicked(true);\r\n        }}>\r\n        <img src={Airplane} alt=\"랜덤 위치 이동 버튼\" />\r\n      </div>\r\n\r\n      <MapContainer\r\n        attributionControl={false}\r\n        zoomControl={false}\r\n        maxBounds={[\r\n          [-90, -180],\r\n          [90, 180],\r\n        ]}\r\n        minZoom={2}\r\n        maxZoom={18}\r\n        style={{width: '100%', height: '100%'}}\r\n        center={center}\r\n        zoom={14}\r\n        scrollWheelZoom={true}>\r\n        <TileLayer\r\n          noWrap={true}\r\n          url=\"https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png\"\r\n        />\r\n        {isFinished === 3 ? Markers() : null}\r\n        <ClickMarker\r\n          isClicked={isClicked}\r\n          setIsClicked={setIsClicked}\r\n          position={position}\r\n          setPosition={setPosition}\r\n        />\r\n        <ZoomControl position=\"bottomright\" />\r\n        {isReady ? <SetCenter center={center} /> : null}\r\n      </MapContainer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Map;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}