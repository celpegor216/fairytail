{"ast":null,"code":"// ** 공통으로 사용할 함수\n\n// ios 판별\nexport const iOS = () => {\n  const ua = navigator.userAgent.toLowerCase();\n  return ua.includes('ios') || ua.includes('iphone') || ua.includes('ipad') || ua.includes('like') && ua.includes('mac') && ua.includes('os') && ua.includes('x');\n};\n\n// boolean 값 반환\nexport const returnTrue = () => true;\nexport const returnFalse = () => false;\n\n// 모달에 필요한 유형\n\n// 현재 사용자 id를 int로 변경 (없거나 유효하지 않은 형식이면 -1 반환)\nexport const currentUser = () => {\n  const userId = localStorage.getItem('userId');\n  if (userId && parseInt(userId)) {\n    return parseInt(userId);\n  } else {\n    return -1;\n  }\n};\n\n// 현재 메시지 id를 int로 변경 (없거나 유효하지 않은 형식이면 -1 반환)\nexport const intMessageId = messageId => {\n  if (messageId && parseInt(messageId)) {\n    return parseInt(messageId);\n  } else {\n    return -1;\n  }\n};\n\n// type을 string으로 변환\nexport const convStringType = type => {\n  if (type) {\n    return type;\n  } else {\n    return '';\n  }\n};\n\n// 현재 type이 text인지 판별\nexport const isText = type => {\n  return type === 'text';\n};","map":{"version":3,"names":["iOS","ua","navigator","userAgent","toLowerCase","includes","returnTrue","returnFalse","currentUser","userId","localStorage","getItem","parseInt","intMessageId","messageId","convStringType","type","isText"],"sources":["C:/Users/Administrator/Desktop/S07P31C209/frontend/src/components/common/commonFunc.ts"],"sourcesContent":["// ** 공통으로 사용할 함수\r\n\r\n// ios 판별\r\nexport const iOS = () => {\r\n  const ua = navigator.userAgent.toLowerCase();\r\n  return (\r\n    ua.includes('ios') ||\r\n    ua.includes('iphone') ||\r\n    ua.includes('ipad') ||\r\n    (ua.includes('like') &&\r\n      ua.includes('mac') &&\r\n      ua.includes('os') &&\r\n      ua.includes('x'))\r\n  );\r\n};\r\n\r\n// boolean 값 반환\r\nexport const returnTrue = () => true;\r\nexport const returnFalse = () => false;\r\n\r\n// 모달에 필요한 유형\r\nexport interface popUp {\r\n  title: string;\r\n  message: string;\r\n}\r\n\r\n// 현재 사용자 id를 int로 변경 (없거나 유효하지 않은 형식이면 -1 반환)\r\nexport const currentUser = () => {\r\n  const userId = localStorage.getItem('userId');\r\n  if (userId && parseInt(userId)) {\r\n    return parseInt(userId);\r\n  } else {\r\n    return -1;\r\n  }\r\n};\r\n\r\n// 현재 메시지 id를 int로 변경 (없거나 유효하지 않은 형식이면 -1 반환)\r\nexport const intMessageId = (messageId: string | undefined) => {\r\n  if (messageId && parseInt(messageId)) {\r\n    return parseInt(messageId);\r\n  } else {\r\n    return -1;\r\n  }\r\n};\r\n\r\n// type을 string으로 변환\r\nexport const convStringType = (type: string | undefined) => {\r\n  if (type) {\r\n    return type;\r\n  } else {\r\n    return '';\r\n  }\r\n};\r\n\r\n// 현재 type이 text인지 판별\r\nexport const isText = (type: string | undefined) => {\r\n  return type === 'text';\r\n};\r\n"],"mappings":"AAAA;;AAEA;AACA,OAAO,MAAMA,GAAG,GAAG,MAAM;EACvB,MAAMC,EAAE,GAAGC,SAAS,CAACC,SAAS,CAACC,WAAW,EAAE;EAC5C,OACEH,EAAE,CAACI,QAAQ,CAAC,KAAK,CAAC,IAClBJ,EAAE,CAACI,QAAQ,CAAC,QAAQ,CAAC,IACrBJ,EAAE,CAACI,QAAQ,CAAC,MAAM,CAAC,IAClBJ,EAAE,CAACI,QAAQ,CAAC,MAAM,CAAC,IAClBJ,EAAE,CAACI,QAAQ,CAAC,KAAK,CAAC,IAClBJ,EAAE,CAACI,QAAQ,CAAC,IAAI,CAAC,IACjBJ,EAAE,CAACI,QAAQ,CAAC,GAAG,CAAE;AAEvB,CAAC;;AAED;AACA,OAAO,MAAMC,UAAU,GAAG,MAAM,IAAI;AACpC,OAAO,MAAMC,WAAW,GAAG,MAAM,KAAK;;AAEtC;;AAMA;AACA,OAAO,MAAMC,WAAW,GAAG,MAAM;EAC/B,MAAMC,MAAM,GAAGC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;EAC7C,IAAIF,MAAM,IAAIG,QAAQ,CAACH,MAAM,CAAC,EAAE;IAC9B,OAAOG,QAAQ,CAACH,MAAM,CAAC;EACzB,CAAC,MAAM;IACL,OAAO,CAAC,CAAC;EACX;AACF,CAAC;;AAED;AACA,OAAO,MAAMI,YAAY,GAAIC,SAA6B,IAAK;EAC7D,IAAIA,SAAS,IAAIF,QAAQ,CAACE,SAAS,CAAC,EAAE;IACpC,OAAOF,QAAQ,CAACE,SAAS,CAAC;EAC5B,CAAC,MAAM;IACL,OAAO,CAAC,CAAC;EACX;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,cAAc,GAAIC,IAAwB,IAAK;EAC1D,IAAIA,IAAI,EAAE;IACR,OAAOA,IAAI;EACb,CAAC,MAAM;IACL,OAAO,EAAE;EACX;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,MAAM,GAAID,IAAwB,IAAK;EAClD,OAAOA,IAAI,KAAK,MAAM;AACxB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}